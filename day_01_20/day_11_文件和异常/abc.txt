读取文本文件时，需要在使用
open函数时指定好带路径的文件名（可以使用相对路径或绝对路径）并将文件模式设置为 'r'（如果不指定，默认值也是
'r'），然后通过
encoding参数指定编码（如果不指定，默认值是 None，那么在读取文件时使用的是操作系统默认的编码），如果不在 Python中，我们可以将那些在运行时可能会出现状况的代码放在
try代码块中，在
try代码块的后面可以跟上一个或多个 except来捕获可能出现的异常状况。例如在上面读取文件的过程中，文件找不到会引发 FileNotFoundError，指定了未知的编码会引发 LookupError，而如果读取文件时无法按指定方式解码会引发 UnicodeDecodeError，我们在
try后面跟上了三个 except分别处理这三种不同的异常状况。最后我们使用
finally代码块来关闭打开的文件，释放掉程序中获取的外部资源，由于
finally块的代码不论程序正常还是异常都会执行到（甚至是调用了 sys模块的 exit函数退出 Python环境，
finally块都会被执行，因为 exit函数实质上是引发了 SystemExit异常），因此我们通常把
finally块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。如果不愿意在
finally代码块中关闭文件对象释放资源，也可以使用上下文语法，通过 with关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源，代码如下所示。能保证保存文件时使用的编码方式与 encoding参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取失败。下面的例子演示了如何读取一个纯文本文件。